repeat
	wait()
until game:IsLoaded()

repeat
	wait()
until game.Players.LocalPlayer.Character

local webhookcheck = syn and "Synapse"
local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

wait = task.wait

--Anti AFK
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
	vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
	wait(1)
	vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

--GUI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/deeeity/mercury-lib/master/src.lua"))()

local gui = Library:Create({
	Name = GameName,
	Size = UDim2.fromOffset(600, 400),
	Theme = Library.Themes.Dark,
	Link = "https://github.com/deeeity/mercury-lib",
	ToggleKey = Enum.KeyCode.RightAlt,
})

local tab = gui:tab({
	Name = "Main",
	Icon = "rbxassetid://8677107889",
})

local misc = gui:tab({
	Name = "Teleports/Misc",
	Icon = "http://www.roblox.com/asset/?id=4799887091",
})

--Variables
getgenv().StartFarming = false
getgenv().SkillOnly = false
getgenv().TargetMob = ""
getgenv().MasteryFarm = false
getgenv().PercentHP = 0.2
getgenv().DistanceHM = 8
getgenv().getOrb = false
getgenv().ChooseWeapon = ""
getgenv().hpLeft = 0
getgenv().HighDistance = 30
getgenv().StopItNow = false
getgenv().FoundIt = false
getgenv().ItemToFind = ""

local VirtualInputManager = game:GetService("VirtualInputManager")

plr = game.Players.LocalPlayer
plrName = plr.Name

--Functions
local ListOfMobs = {}
local ListOfWeapons = {}
local Spawns = { "DragonBalls" }
local OrbsAndBalls = {}
local add = false

--TP
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
	AllIDs = game:GetService("HttpService"):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
	table.insert(AllIDs, actualHour)
	writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
end
function TPReturner()
	local Site
	if foundAnything == "" then
		Site = game.HttpService:JSONDecode(
			game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100")
		)
	else
		Site = game.HttpService:JSONDecode(
			game:HttpGet(
				"https://games.roblox.com/v1/games/"
					.. PlaceID
					.. "/servers/Public?sortOrder=Asc&limit=100&cursor="
					.. foundAnything
			)
		)
	end
	local ID = ""
	if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
		foundAnything = Site.nextPageCursor
	end
	local num = 0
	for i, v in pairs(Site.data) do
		local Possible = true
		ID = tostring(v.id)
		if tonumber(v.maxPlayers) > tonumber(v.playing) then
			for _, Existing in pairs(AllIDs) do
				if num ~= 0 then
					if ID == tostring(Existing) then
						Possible = false
					end
				else
					if tonumber(actualHour) ~= tonumber(Existing) then
						local delFile = pcall(function()
							delfile("NotSameServers.json")
							AllIDs = {}
							table.insert(AllIDs, actualHour)
						end)
					end
				end
				num = num + 1
			end
			if Possible == true then
				table.insert(AllIDs, ID)
				wait()
				pcall(function()
					writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
					wait()
					game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
				end)
				wait(4)
			end
		end
	end
end

function Teleport()
	while wait() do
		pcall(function()
			TPReturner()
			if foundAnything ~= "" then
				TPReturner()
			end
		end)
	end
end

--Auto Skill
local function autoSkill()
	VirtualInputManager:SendKeyEvent(true, "X", false, game)
	wait()
	VirtualInputManager:SendKeyEvent(false, "X", false, game)

	wait(1)
	VirtualInputManager:SendKeyEvent(true, "Z", false, game)
	wait()
	VirtualInputManager:SendKeyEvent(false, "Z", false, game)

	wait(1)
	VirtualInputManager:SendKeyEvent(true, "F", false, game)
	wait()
	VirtualInputManager:SendKeyEvent(false, "F", false, game)

	wait(1)
	VirtualInputManager:SendKeyEvent(true, "V", false, game)
	wait()
	VirtualInputManager:SendKeyEvent(false, "V", false, game)

	wait(1)
	VirtualInputManager:SendKeyEvent(true, "B", false, game)
	wait()
	VirtualInputManager:SendKeyEvent(false, "B", false, game)
end

--Notify Notification
function Notify(TitleMsg, Message, Timer)
	gui:Notification({
		Title = TitleMsg,
		Text = Message,
		Duration = Timer,
		Callback = function() end,
	})
end

-- Get Orb/Dragon Balls
local function getTheOrb()
	FoundIt = false

	for i, v in pairs(game:GetService("Workspace").Resources.SpawnedOrbs:GetChildren()) do
		if v:IsA("Tool") and v:FindFirstChild("Handle") then
			Notify("Got something!", "You got " .. v.Name, 10)
			game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(v.Handle.CFrame)
			if v.Name == ItemToFind then
				FoundIt = true
			end
			wait(0.1)
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Resources.NPC.SetSpawn["North City"].CFrame
				* CFrame.new(0, 30, 0)
		elseif v:IsA("Model") and v:FindFirstChild("Part") then
			Notify("Got something!", "You got " .. v.Name, 10)
			game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(v.Part.CFrame)
			if v.Name == ItemToFind then
				FoundIt = true
			end
			wait(0.1)
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Resources.NPC.SetSpawn["North City"].CFrame
				* CFrame.new(0, 30, 0)
		end
	end
	for i, v in pairs(game:GetService("Workspace"):GetChildren()) do
		if v:IsA("Tool") and v:FindFirstChild("Handle") then
			Notify("Got something!", "You got " .. v.Name, 10)
			game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(v.Handle.CFrame)
			if v.Name == ItemToFind then
				FoundIt = true
			end
			wait(0.1)
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Resources.NPC.SetSpawn["North City"].CFrame
				* CFrame.new(0, 30, 0)
		end
	end
	if FoundIt then
		Notify("Yay!", "Found your " .. ItemToFind, 15)
	end
end

--Get Available Orbs/Dragon Balls
local function getOrbsAndBalls()
	for i, v in pairs(game:GetService("ReplicatedStorage").Assets.Models.DragonBalls:GetChildren()) do
		if v:IsA("Model") then
			add = true
			for index, value in ipairs(OrbsAndBalls) do
				if v.Name == value then
					add = false
				end
			end
			if add == true then
				table.insert(OrbsAndBalls, v.Name)
			end
		end
	end

	for i, v in pairs(game:GetService("ReplicatedStorage").Assets.Orbs:GetChildren()) do
		if v:IsA("Tool") then
			add = true
			for index, value in ipairs(OrbsAndBalls) do
				if v.Name == value then
					add = false
				end
			end
			if add == true then
				table.insert(OrbsAndBalls, v.Name)
			end
		end
	end

	table.sort(OrbsAndBalls, function(a, b)
		return a < b
	end)
end

--Get Available Maps
local function getMaps()
	for i, v in pairs(game:GetService("Workspace").Resources.NPC.SetSpawn:GetChildren()) do
		if v:IsA("Part") then
			add = true
			for index, value in ipairs(Spawns) do
				if v.Name == value then
					add = false
				end
			end
			if add == true then
				table.insert(Spawns, v.Name)
			end
		end
	end

	table.sort(Spawns, function(a, b)
		return a < b
	end)
end

local function getMobs()
	for i, v in pairs(game:GetService("Workspace").Resources.SpawnedAI:GetChildren()) do
		if v:IsA("Model") then
			add = true
			for index, value in ipairs(ListOfMobs) do
				if v.Name == value then
					add = false
				end
			end
			if add == true then
				table.insert(ListOfMobs, v.Name)
			end
		end
	end

	table.sort(ListOfMobs, function(a, b)
		return a < b
	end)
end

local function getWeapons()
	for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
		if v:IsA("Tool") then
			add = true
			for index, value in ipairs(ListOfMobs) do
				if v.Name == value then
					add = false
				end
			end
			if add == true then
				table.insert(ListOfWeapons, v.Name)
			end
		end
	end

	table.sort(ListOfWeapons, function(a, b)
		return a < b
	end)
end

getOrbsAndBalls()
getMaps()
getWeapons()
getMobs()
getTheOrb()

local function AutoExec()
	if webhookcheck == "Synapse" then
		syn.queue_on_teleport([[
		rawr = false
repeat wait() until game:IsLoaded()
repeat
	wait()
	if game:GetService("Players").LocalPlayer:FindFirstChild('PlayerGui') then
	if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Intro") then
		if game:GetService("Players").LocalPlayer.PlayerGui.Intro:FindFirstChild("Play") then
			if game:GetService("Players").LocalPlayer.PlayerGui.Intro.Play.Visible == true then
				rawr = true
			end
		end
	end
end
until rawr == true

wait(3)
    if AutoFind then
		getgenv().AutoFind = true
		ItemToFind = ItemToFind
	end
	loadstring(game:HttpGet("https://raw.githubusercontent.com/LilDarkin/Some-Scripts/master/" .. game.PlaceId))()
]])
	end
end

Notify("Welcome!", "Thank you for using my script", 10)

--Main
local WeaponDropdown = tab:dropdown({
	Name = "Weapon to use",
	StartingText = "...",
	Items = ListOfWeapons,
	Description = "List of Available Weapon(s)",
	Callback = function(v)
		ChooseWeapon = v
	end,
})

local MobDropdown = tab:dropdown({
	Name = "Target Mob",
	StartingText = "...",
	Items = ListOfMobs,
	Description = "List of Available Mobs",
	Callback = function(v)
		TargetMob = v

		game:GetService("ReplicatedStorage").Packages.Knit.Services.QuestService.RF.CancelQuest:InvokeServer()
	end,
})

tab:Button({
	Name = "REFRESH",
	Description = "Refresh all dropdowns",
	Callback = function()
		game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
		Notify("Please Wait!", "Refreshing...", 3)
		MobDropdown:Clear()
		WeaponDropdown:Clear()
		wait()
		for k in pairs(ListOfWeapons) do
			ListOfWeapons[k] = nil
		end
		for k in pairs(ListOfMobs) do
			ListOfMobs[k] = nil
		end
		wait(1)
		getWeapons()
		getMobs()
		wait(1)
		WeaponDropdown:AddItems(ListOfWeapons)
		MobDropdown:AddItems(ListOfMobs)
	end,
})

tab:Toggle({
	Name = "Auto Farm",
	StartingState = false,
	Description = "With Auto Quest | Turn off Skill Only before using",
	Callback = function(state)
		StartFarming = state

		if SkillOnly then
			Notify("ERROR!", "Turn Off Skill Only or it might broke", 5)
		end

		if state == false then
			StopItNow = true
			VirtualInputManager:SendKeyEvent(false, "C", false, game)
		else
			StopItNow = false
		end

		if StartFarming == false and SkillOnly == false then
			gui:set_status("Status: IDLE")
		else
			gui:set_status(
				"Auto Farm: "
					.. tostring(StartFarming)
					.. " | Mastery Farm: "
					.. tostring(MasteryFarm)
					.. " | Skill Only: "
					.. tostring(SkillOnly)
			)
		end
	end,
})

local SkillTab = tab:Toggle({
	Name = "Skill Only",
	StartingState = false,
	Description = "Same as Auto Farm but abilities only | Turn off Auto Farm before using",
	Callback = function(state)
		if StartFarming then
			Notify("ERROR!", "Turn Off Auto Farm or it might broke", 5)
		end

		SkillOnly = state

		if state == false then
			StopItNow = true
			VirtualInputManager:SendKeyEvent(false, "C", false, game)
		else
			StopItNow = false
		end

		if StartFarming == false and SkillOnly == false then
			gui:set_status("Status: IDLE")
		else
			gui:set_status(
				"Auto Farm: "
					.. tostring(StartFarming)
					.. " | Mastery Farm: "
					.. tostring(MasteryFarm)
					.. " | Skill Only: "
					.. tostring(SkillOnly)
			)
		end
	end,
})

tab:Toggle({
	Name = "Mastery Farm",
	StartingState = false,
	Description = "Will use ability (For Auto Farm)",
	Callback = function(state)
		MasteryFarm = state

		if MasteryFarm == false then
			VirtualInputManager:SendKeyEvent(false, "C", false, game)
		end

		if StartFarming == false and SkillOnly == false then
			gui:set_status("Status: IDLE")
		else
			gui:set_status(
				"Auto Farm: "
					.. tostring(StartFarming)
					.. " | Mastery Farm: "
					.. tostring(MasteryFarm)
					.. " | Skill Only: "
					.. tostring(SkillOnly)
			)
		end
	end,
})

tab:Slider({
	Name = "Custom % Health (1-9 means 10-90)",
	Default = 2,
	Min = 1,
	Max = 9,
	Callback = function(perzent)
		PercentHP = tonumber("0." .. perzent)
	end,
})

tab:Slider({
	Name = "Distance before using Ability",
	Default = 30,
	Min = 1,
	Max = 70,
	Callback = function(distance)
		HighDistance = distance
	end,
})

tab:Slider({
	Name = "Distance between the mob",
	Default = 8,
	Min = 1,
	Max = 10,
	Callback = function(distance)
		DistanceHM = distance
	end,
})

tab:Button({
	Name = "FIX???",
	Description = "If auto farming is BUG click this idk if it will work lol XD",
	Callback = function()
		for i, v in pairs(game:GetService("Workspace").Live.Characters[plrName].HumanoidRootPart:GetChildren()) do
			if v:IsA("BodyVelocity") then
				v:Destroy()
			end
		end
		wait(0.1)
		if StopItNow == false then
			StopItNow = true
			wait(3)
			StopItNow = false
		end
	end,
})

--Misc
misc:dropdown({
	Name = "Teleport to",
	StartingText = "...",
	Items = Spawns,
	Description = "List of Available Maps",
	Callback = function(v)
		if v == "DragonBalls" then
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
				game:GetService("Workspace").Resources.NPC.DragonBalls.CFrame
		else
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
				game:GetService("Workspace").Resources.NPC.SetSpawn[v].CFrame
		end
	end,
})

misc:Toggle({
	Name = "Get ORB",
	StartingState = false,
	Description = "Snipe spawned ORB and Dragon Ball | Not recommended while auto farming",
	Callback = function(state)
		getOrb = state
	end,
})

misc:Button({
	Name = "Snipe Orb/Dragon Ball",
	Description = "Self-explanatory",
	Callback = function()
		getTheOrb()
	end,
})

misc:Button({
	Name = "REJOIN SERVER",
	Description = "Self-explanatory | also Auto-exec (Synapse only)",
	Callback = function()
		AutoExec()

		local ts = game:GetService("TeleportService")

		local p = game:GetService("Players").LocalPlayer

		ts:Teleport(game.PlaceId, p)
	end,
})

misc:Button({
	Name = "Server-Hop",
	Description = "Self-explanatory | also Auto-exec (Synapse only)",
	Callback = function()
		AutoExec()

		Teleport()
	end,
})

if webhookcheck == "Synapse" then
	misc:dropdown({
		Name = "Choose item to find",
		StartingText = "...",
		Items = OrbsAndBalls,
		Description = "List of Available DragonBalls/Orbs",
		Callback = function(v)
			ItemToFind = v
		end,
	})

	misc:Button({
		Name = "Auto Server-Hop (Exclusive only for Synapse)",
		Description = "Self-explanatory | Will stop if found",
		Callback = function()
			AutoFind = true
			getTheOrb()
			wait(1)
			if FoundIt == false then
				Notify("Not found!", "Teleporting...", 10)
				AutoExec()
				Teleport()
			end
		end,
	})
end

spawn(function()
	while wait() do
		if getOrb then
			getTheOrb()
		end

		if StartFarming then
			for i, v in pairs(game:GetService("Workspace").Resources.SpawnedAI:GetChildren()) do
				if
					v:IsA("Model")
					and v.Name == TargetMob
					and v:FindFirstChild("Humanoid")
					and v:FindFirstChild("HumanoidRootPart")
				then
					VirtualInputManager:SendKeyEvent(true, "C", false, game)

					repeat
						wait()
						if StartFarming then
							if
								game:GetService("Workspace").Live.Characters:FindFirstChild(plrName)
								and game
									:GetService("Workspace").Live.Characters[plrName]
									:FindFirstChild("HumanoidRootPart")
								and game
										:GetService("Workspace").Live.Characters[plrName].HumanoidRootPart
										:FindFirstChild("BodyVelocity")
									== nil
							then --It will make you float
								char = game.Players.LocalPlayer.Character
								hm = char.HumanoidRootPart
								bv = Instance.new("BodyVelocity")
								bv.Parent = hm
								bv.MaxForce = Vector3.new(100000, 100000, 100000)
								bv.Velocity = Vector3.new(0, 0, 0)
								wait()
							end

							hpLeft = v.Humanoid.MaxHealth * PercentHP --Get the required health to use Ability

							game
								:GetService("ReplicatedStorage").Packages.Knit.Services.CharacterService.RF.SetTarget
								:InvokeServer(v)

							if game.Players.LocalPlayer.Backpack:FindFirstChild(ChooseWeapon) then -- Check if exist in the backpack and equip
								wait(1)
								game.Players.LocalPlayer.Character.Humanoid:EquipTool(
									game.Players.LocalPlayer.Backpack[ChooseWeapon]
								)
							end

							if plr.PlayerGui.Ability.Background:FindFirstChild("BackpackTitle") == nil then --Its for bug purposes
								game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
							end

							if getOrb then --Will get the spawned ORB/Dragon Balls
								getTheOrb()
							end

							if
								game:GetService("Players").LocalPlayer.PlayerGui.ActiveQuest.Background.Background.Visible
								== false
							then
								if TargetMob == "Destroyer" or TargetMob == "Oscar" then
									game
										:GetService("ReplicatedStorage").Packages.Knit.Services.QuestService.RF.AcceptQuest
										:InvokeServer("Elite Freezer Force Quest")
								else
									game
										:GetService("ReplicatedStorage").Packages.Knit.Services.QuestService.RF.AcceptQuest
										:InvokeServer(TargetMob .. " Quest")
								end
							end

							if plr.PlayerGui.Ability.Background:FindFirstChild("BackpackTitle") then -- AUTO FARM
								if
									game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
									and v:FindFirstChild("Humanoid")
									and v:FindFirstChild("HumanoidRootPart")
								then
									if MasteryFarm then
										if v.Humanoid.Health <= hpLeft then
											game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame
												* CFrame.new(0, HighDistance, 0)

											-- AUTO SKILL
											autoSkill()
										else
											game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame
												* CFrame.new(0, DistanceHM, 0)

											game
												:GetService("ReplicatedStorage").Packages.Knit.Services.CombatService.RF.MeleeAttack
												:InvokeServer("Punch")
										end
									elseif MasteryFarm == false then
										game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame
											* CFrame.new(0, DistanceHM, 0)

										game
											:GetService("ReplicatedStorage").Packages.Knit.Services.CombatService.RF.MeleeAttack
											:InvokeServer("Punch")
									end
								end
							end
						end

					until v.Humanoid.Health == 0 or StartFarming == false or StopItNow == true

					for i, v in
						pairs(game:GetService("Workspace").Live.Characters[plrName].HumanoidRootPart:GetChildren())
					do
						if v:IsA("BodyVelocity") then
							v:Destroy()
						end
					end
				end
			end
		end

		if SkillOnly then
			for i, v in pairs(game:GetService("Workspace").Resources.SpawnedAI:GetChildren()) do
				if
					v:IsA("Model")
					and v.Name == TargetMob
					and v:FindFirstChild("Humanoid")
					and v:FindFirstChild("HumanoidRootPart")
				then
					VirtualInputManager:SendKeyEvent(true, "C", false, game)

					repeat
						wait()

						if SkillOnly then
							if
								game:GetService("Workspace").Live.Characters:FindFirstChild(plrName)
								and game
									:GetService("Workspace").Live.Characters[plrName]
									:FindFirstChild("HumanoidRootPart")
								and game
										:GetService("Workspace").Live.Characters[plrName].HumanoidRootPart
										:FindFirstChild("BodyVelocity")
									== nil
							then --It will make you float
								char = game.Players.LocalPlayer.Character
								hm = char.HumanoidRootPart
								bv = Instance.new("BodyVelocity")
								bv.Parent = hm
								bv.MaxForce = Vector3.new(100000, 100000, 100000)
								bv.Velocity = Vector3.new(0, 0, 0)
								wait()
							end

							hpLeft = v.Humanoid.MaxHealth * PercentHP --Get the required health to use Ability

							game
								:GetService("ReplicatedStorage").Packages.Knit.Services.CharacterService.RF.SetTarget
								:InvokeServer(v)

							if game.Players.LocalPlayer.Backpack:FindFirstChild(ChooseWeapon) then -- Check if exist in the backpack and equip
								wait(1)
								game.Players.LocalPlayer.Character.Humanoid:EquipTool(
									game.Players.LocalPlayer.Backpack[ChooseWeapon]
								)
							end

							if plr.PlayerGui.Ability.Background:FindFirstChild("BackpackTitle") == nil then --Its for bug purposes
								game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
							end

							if getOrb then --Will get the spawned ORB/Dragon Balls
								getTheOrb()
							end

							if
								game:GetService("Players").LocalPlayer.PlayerGui.ActiveQuest.Background.Background.Visible
								== false
							then
								if TargetMob == "Destroyer" or TargetMob == "Oscar" then
									game
										:GetService("ReplicatedStorage").Packages.Knit.Services.QuestService.RF.AcceptQuest
										:InvokeServer("Elite Freezer Force Quest")
								else
									game
										:GetService("ReplicatedStorage").Packages.Knit.Services.QuestService.RF.AcceptQuest
										:InvokeServer(TargetMob .. " Quest")
								end
							end

							if plr.PlayerGui.Ability.Background:FindFirstChild("BackpackTitle") then -- AUTO SKILL FARM
								if
									game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
									and v:FindFirstChild("Humanoid")
									and v:FindFirstChild("HumanoidRootPart")
								then
									game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame
										* CFrame.new(0, HighDistance, 0)

									-- AUTO SKILL
									autoSkill()
								end
							end
						end

					until v.Humanoid.Health == 0 or SkillOnly == false or StopItNow == true

					for i, v in
						pairs(game:GetService("Workspace").Live.Characters[plrName].HumanoidRootPart:GetChildren())
					do
						if v:IsA("BodyVelocity") then
							v:Destroy()
						end
					end
				end
			end
		end
	end
end)
